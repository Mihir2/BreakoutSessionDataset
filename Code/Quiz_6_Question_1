{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Quiz_6_Question_1","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"x12OrY6v9_jr"},"source":["Hello Machine Learning Engineers, \n","\n","You have been given a data which is obtained from **COVID-19 Tracking project** and NYTimes. Coronaviruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). \n","\n","The number of new cases are increasing day by day around the world. This dataset has COVID information for United States at daily level.\n","\n","Number of Instances: 156 <br>\n","Number of Attributes: 7 (including the target variable `y`)\n","\n","Attribute Information: \n","   * **y:**  Total number of tests with positive results in a single day(Numerical)\n","   * **f1:** date of observation\n","   * **f2:** number of tests with negative results (Numerical)\n","   * **f2:** number of test with pending results (Numerical)\n","   * **f3:** Number of patients hospitalized on the date (Numerical)\n","   * **f4:** Number of patients on ventilator on the date (Numerical)\n","   * **f5:** Number of patients recovered on the date (Numerical)\n","   * **f6:** number of deaths (Numerical)\n","\n","There are no missing Attribute Values."]},{"cell_type":"markdown","metadata":{"id":"uEdfLr5d-C9X"},"source":["\n","## Iterative reweighted least squares (IRLS) for Linear Regression\n","The **Genesis Equation** for Linear Regression Model is of the form:\n","\n","$\\hat{y}(x,w) = xw$  <br>\n","\n","* $\\hat{y}(x,w)$ is predicted output,\n","* $x$ is the aumented Input (augmented with unit vector column)\n","* $w = [w_{0}, w_{1}, w_{2}, .. , w_{F}]$ are the parameters to be learned from training samples with $F$ Features\n","* $t_{n}$ is the target variable (truth label)$\n","\n","The **Loss Function** for Linear Regression Model is of the form: <br>\n","\n","$E(w) = \\frac{1}{2}\\Sigma_{n=1}^{N} (t_{n} - \\hat{y}_{n})^{2}$\n","\n","The **Newton-Raphson update**, for minimizing a function E(w), takes the form\n","\n","$w_{new} = w_{old} - H^{-1} \\Delta E(w) $ <br>\n","Where H is the Hessian matrix whose elements comprise the second derivative with respect to the components of w.\n","\n","Applying the Newton-Raphson update to the  error function\n","for the linear regression model. We see that the gradient and\n","Hessian of this error function are given by: <br>\n","\n","$\\Delta E(w) = \\Sigma^{N}_{n = 1} (\\hat{y}_{n} - t_{n})x_{n} = x^{T} x w_{old} - x^{T}t$ <br>\n","\n","$H = \\Delta \\Delta E(w) = x^{T}x$\n","\n","The Newton-Raphson update formula for the linear regression model then becomes: <br>\n","$w_{new} = w_{old} - ((x^{T}x)^{-1} (x^{T} x w_{old} - x^{T}t))$ <br>\n","\n","<font color=\"GREEN\"> HINT: Simplify the equation above to get the UPDATE Rule for finding the weights for IRLS solution in Step 6</font> \n","\n","Your task is to implement <font color=green>STEP 6</font> of the Linear Regression model using **IRLS Solution** for predicting the total number of positive results in a single day. \n","\n","\n","<font color=\"red\">DO NOT USE SKLEARNS LINEAR REGRESSION LIBRARY DIRECTLY.</font>"]},{"cell_type":"markdown","metadata":{"id":"dSb3y_gm-GfW"},"source":["### **Question:** In the following code cell implement Step 6.\n","* Step 1: Import the dataset using Pandas Dataframe (Step 1 Implemented already)\n","* Step 2: Partition your dataset into training and testing using sklearns train_test_split library and split the features and target labels into seperate variables (Step 2 Implemented already)\n","* Step 3: Scale the features using sklearns min max scaling function (Step 3 Implemented already)\n","* Step 4: Convert Scaled Features and Labels into numpy arrays with dimensions required by IRLS solution (Step 4 Implemented already)\n","* Step 5: Augment scaled trained and test features with unit vectors.(Step 5 Implemented already)\n","* <font color = \"Green\">Step 6: Train on training dataset using IRLS Solution for finding the weights.</font>\n","* Step 7: Test using Testing Dataset (Already Implemented)\n","  * Step 7.1: Use genesis equation $\\hat{y} = w.x_{test}$ where $w$ is the augmented weight array, $x_{test}$ is the input test features agumented with unit vector and $\\hat{y}$ is the predicted value.\n","  * Step 7.2: Calculate MSE for $X_{test}$"]},{"cell_type":"code","metadata":{"id":"N_t2983ZX7t7"},"source":["# Step 1 already implemented\n","import pandas as pd\n","import io\n","import requests\n","url=\"https://raw.githubusercontent.com/Mihir2/BreakoutSessionDataset/master/us_covid.csv\"\n","s = requests.get(url).content\n","data = pd.read_csv(io.StringIO(s.decode('utf-8')))\n","\n","# Step 2 already implemented\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","output = data['y']\n","input = data.to_numpy()[:,1:]\n","x_train, x_test, y_train, y_test = train_test_split(input, output, test_size = 0.2, random_state = 42)\n","\n","# Step 3 already implemented\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","sc_xtrain = scaler.fit_transform(x_train)\n","sc_xtest = scaler.transform(x_test)\n","\n","# Step 4 already implemented\n","augment_xtrain = np.ones((sc_xtrain.shape[0],sc_xtrain.shape[1]+1))\n","augment_xtrain[:,1:] = sc_xtrain\n","augment_xtest = np.ones((sc_xtest.shape[0],sc_xtest.shape[1]+1))\n","augment_xtest[:,1:] = sc_xtest\n","\n","# Step 5 already implemented\n","y_train_arr = y_train.to_numpy().reshape(y_train.shape[0],1)\n","x_train_arr = augment_xtrain\n","y_test_arr  = y_test.to_numpy().reshape(y_test.shape[0],1)\n","x_test_arr  = augment_xtest\n","\n","# Step 6 (To be implemented)\n","weights = \n","\n","# Step 7 (Already Implemented)\n","y_test_preds = np.dot(x_test_arr, weights)\n","from sklearn.metrics import mean_squared_error\n","mse_error = 1/2*((y_test_arr-y_test_preds)**2).mean()\n","print(mse_error)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"As_km0QizvqB"},"source":["<font color=\"green\"> SUBMISSION DETAILS: <br>Copy your code for STEP 6 and paste that as your answer on UBLearns along with comments about the implementation of Step 6 </font>"]}]}